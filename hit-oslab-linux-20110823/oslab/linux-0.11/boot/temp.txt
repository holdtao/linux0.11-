! 打印 "NOW we are in SETUP"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#25
    mov bx,#0x0007
    mov bp,#msg2
    mov ax,cs
    mov es,ax
    mov ax,#0x1301
    int 0x10

! 获取光标位置
    mov ax,#INITSEG
    mov ds,ax
    mov ah,#0x03
    xor bh,bh
    int 0x10                        ! 返回：dh = 行号；dl = 列号
    mov [0],dx                      ! 存储到内存0x9000:0处

! 获取内存大小
    mov ah,#0x88
    int 0x15                        ! 返回：ax = 从0x100000(1M)处开始的扩展内存大小(KB)
    mov [2],ax                      ! 将扩展内存数值存放在0x90002处（1个字）

! 读第一个磁盘参数表复制到0x90004处
    mov ax,#0x0000
    mov ds,ax
    lds si,[4*0x41]                 ! 把低字(2B)置为偏移地址，高字(2B)置为段地址
    mov ax,#INITSEG
    mov es,ax
    mov di,#0x0004
    mov cx,#0x10                    ! 重复16次，即传送16B
    rep
    movsb                           ! 按字节传送

! 打印前的准备
    mov ax,cs
    mov es,ax
    mov ax,#INITSEG
    mov ds,ax

! 打印"Cursor position:"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#18
    mov bx,#0x0007
    mov bp,#msg_cursor
    mov ax,#0x1301
    int 0x10

! 打印光标位置
    mov dx,[0]
    call    print_hex

! 打印"Memory Size:"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#14
    mov bx,#0x0007
    mov bp,#msg_memory
    mov ax,#0x1301
    int 0x10

! 打印内存大小
    mov dx,[2]
    call    print_hex

! 打印"KB"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#2
    mov bx,#0x0007
    mov bp,#msg_kb
    mov ax,#0x1301
    int 0x10

! 打印"Cyls:" 
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#7
    mov bx,#0x0007
    mov bp,#msg_cyles
    mov ax,#0x1301
    int 0x10

! 打印柱面数   
    mov dx,[4]
    call    print_hex

! 打印"Heads:"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#8
    mov bx,#0x0007
    mov bp,#msg_heads
    mov ax,#0x1301
    int 0x10

! 打印磁头数
    mov dx,[6]
    call    print_hex

! 打印"Sectors:"
    mov ah,#0x03
    xor bh,bh
    int 0x10
    mov cx,#10
    mov bx,#0x0007
    mov bp,#msg_sectors
    mov ax,#0x1301
    int 0x10
    mov dx,[18]
    call    print_hex

inf_loop:
    jmp inf_loop

! 上面的call都转到这里
print_hex:
    mov    cx,#4                    ! dx(16位)可以显示4个十六进制数字
print_digit:
    rol    dx,#4                    ! 取 dx 的高4比特移到低4比特处
    mov    ax,#0xe0f                ! ah = 请求的功能值(显示单个字符)，al = 半字节(4个比特)掩码
    and    al,dl                    ! 前4位会被置为0
    add    al,#0x30                 ! 给 al 数字加上十六进制 0x30
    cmp    al,#0x3a                 ! 比较看是否大于数字十
    jl     outp                     ! 是一个不大于十的数字则跳转
    add    al,#0x07                 ! 否则就是a~f，要多加7
outp:
    int    0x10                     ! 显示单个字符
    loop   print_digit              ! 重复4次
    ret                             

! 打印换行回车
print_nl:
    mov    ax,#0xe0d     ! CR
    int    0x10
    mov    al,#0xa     ! LF
    int    0x10
    ret

msg2:
    .byte 13,10
    .ascii "NOW we are in SETUP"
    .byte 13,10,13,10
msg_cursor:
    .byte 13,10
    .ascii "Cursor position:"
msg_memory:
    .byte 13,10
    .ascii "Memory Size:"
msg_cyles:
    .byte 13,10
    .ascii "Cyls:"
msg_heads:
    .byte 13,10
    .ascii "Heads:"
msg_sectors:
    .byte 13,10
    .ascii "Sectors:"
msg_kb:
    .ascii "KB"

.org 510
boot_flag:
    .word 0xAA55
/*



! 显示“Now we are in SETUP”

	mov	ah,#0x03		! read cursor pos 
	xor	bh,bh
	int	0x10
	
	mov  ax,cs 
	mov  es,ax
	mov	cx,#23
	mov	bx,#0x0007		! page 0, attribute 7 (normal)
	mov	bp,#msg2
	
	mov	ax,#0x1301		! write string, move cursor
	int	0x10

! 获取光标的位置，然后保存它到寄存器中
	mov ax,#INITSEG
	mov ds,ax
	mov ah,#0x03
	xor bh,bh
	int 0x10
	mov [0],dx

!获取扩展内存大小
	mov ah,#0x88
	int  0x15
	mov [2],ax
!获取录音数据
	mov ah,#0x0f
	int 0x10
	mov [4],bx
	mov [6],ax

!选择配置参数
	mov ah,#0x12
	mov bl,#0x10
	int 0x10
	mov [8],ax
	mov [10],bx
	mov  [12],cx
!获取磁盘0的数据
	mov ax,#0x0000
	mov ds,ax
	lds si,[4*0x41]
	mov ax,#INITSEG
	mov es,ax
	mov di,#0x0080
	mov cx,#0x10
	rep
	movsb
!获取磁盘1的数据
	mov ax,#0x0000
	mov ds,ax
	lds si,[4*0x46]
	mov ax,#INITSEG
	mov es,ax
	mov di,#0x0090
	mov cx,#0x10
	rep
	movsb

!打印
	mov ah,0x03
	xor bh,bh
	int 0x10

	mov cx,#13
	mov bx,#0x0007
	mov bp,#MSG_CUESOR
	mov ax,#0x1301
	int 0x10

	mov ax,#INITSEG
	mov ds,ax

!打印
print_hex1:
	mov cx,#4
	mov dx,[0]  !光标位置
print_digit1:
	rol dx,#4
	mov ax,#0xe0f
	and al,dl
	add al,#0x30
	cmp al,#0x3a
	jl outp1
	add al,#0x07
outp1:
	int 0x10
	loop print_digit1

!打印内存大小
	mov ah,0x03
	xor bh,bh
	int 0x10

	mov cx,#14
	mov bx,#0x0007
	mov bp,#MSG_MEMORY
	mov ax,#0x1301
	int 0x10

	mov ax,#INITSEG
	mov ds,ax

print_hex2:
	mov cx,#4
	mov  dx,[2]
print_digit2:
	rol dx,#4
	mov ax,#0xe0f
	and al,dl
	add al,#0x30
	cmp al,#0x3a
	jl outp2
	add al,#0x07
outp2:
	int 0x10
	loop print_digit2

!打印回车和换行符
print_nl:
	mov ax,#0xe0d
	int 0x10 
	mov al,#0xa
	int 0x10  

msg2:
	.byte 13,10
	.ascii "Now we are in SETUP"
	.byte 13,10,13,10
MSG_CUESOR:
	.byte 13,10
	.ascii "Cursor Pos:"
MSG_MEMORY:
	.byte 13,10
	.ascii "memory SIZE:"